name: MaaYYs Resource Build and Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  actions: write

jobs:
  update-and-commit:
    name: Update version and commit
    runs-on: ubuntu-latest
    outputs:
      commit_sha: ${{ steps.commit_push.outputs.commit_sha }}

    steps:
      - name: Checkout MaaYYs repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.ref }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Update resource_version in config file
        shell: bash
        run: |
          currentTag="${{ github.ref_name }}"
          echo "Updating resource_config.json with version: $currentTag"
          python3 -c "import json; config_path = 'resource_config.json'; f = open(config_path, 'r+'); config = json.load(f); config['resource_version'] = '$currentTag'; f.seek(0); f.truncate(); json.dump(config, f, indent=2, ensure_ascii=False)"
          echo "resource_config.json updated successfully"

      - name: Commit and Push changes
        id: commit_push
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          if ! git diff --quiet resource_config.json; then
            git add resource_config.json
            git commit -m "ci: Update resource_version to ${{ github.ref_name }}" -m "[skip ci]"
            DEFAULT_BRANCH=${{ github.event.repository.default_branch }}
            git push origin HEAD:$DEFAULT_BRANCH
          fi

          NEW_COMMIT_SHA=$(git rev-parse HEAD)
          echo "commit_sha=${NEW_COMMIT_SHA}" >> $GITHUB_OUTPUT

  build:
    name: Build ${{ matrix.os }}
    needs: update-and-commit
    runs-on: ${{ matrix.runner }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-x64
            runner: windows-latest
            mfwph_pattern: 'MFWPH_windows-x64.zip'
          - os: macos-x64
            runner: macos-13
            mfwph_pattern: 'MFWPH_macos-x64.tar.gz'
          - os: macos-arm64
            runner: macos-14
            mfwph_pattern: 'MFWPH_macos-arm64.tar.gz'
          - os: linux-x64
            runner: ubuntu-latest
            mfwph_pattern: 'MFWPH_linux-x64.tar.gz'

    steps:
      - name: Checkout MaaYYs repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.update-and-commit.outputs.commit_sha }}
          path: MaaYYs
          fetch-depth: 0

      - name: Set up Python (Unix)
        if: runner.os != 'Windows'
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      # ================== FIXED CHANGELOG LOGIC (WINDOWS) ==================
      - name: Generate Changelog (Windows)
        if: runner.os == 'Windows'
        id: changelog_windows
        shell: pwsh
        working-directory: MaaYYs
        run: |
          $currentTag = "${{ github.ref_name }}"
          # Find the latest stable tag by filtering out pre-release tags and current tag itself
          $latestStableTag = git tag --sort=-v:refname | Select-String -Pattern '-beta' -NotMatch | Select-String -Pattern '-rc' -NotMatch | Select-String -Pattern "^$currentTag$" -NotMatch | Select-Object -First 1
          
          if (-not $latestStableTag) {
            $previousTag = git rev-list --max-parents=0 HEAD
            Write-Host "No stable tag found, using initial commit as baseline."
          } else {
            $previousTag = $latestStableTag
            Write-Host "Found latest stable tag: $previousTag"
          }

          $changelog = git log --pretty=format:"* %s (%h)" --invert-grep --grep="^ci: Update resource_version" "$previousTag..$currentTag"
          if (-not $changelog) {
            $changelog = "* 首次发布或无用户提交"
          }
          $changelog = $changelog -replace "`n", "%0A"
          "CHANGELOG<<EOF" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          $changelog | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "EOF" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      # ================== FIXED CHANGELOG LOGIC (UNIX) ==================
      - name: Generate Changelog (Unix)
        if: runner.os != 'Windows'
        id: changelog_unix
        shell: bash
        working-directory: MaaYYs
        run: |
          CURRENT_TAG="${{ github.ref_name }}"
          # Find the latest stable tag by filtering out pre-release tags and current tag itself
          LATEST_STABLE_TAG=$(git tag --sort=-v:refname | grep -v -- '-beta' | grep -v -- '-rc' | grep -v "^${CURRENT_TAG}$" | head -n 1)

          if [ -z "$LATEST_STABLE_TAG" ]; then
            PREVIOUS_TAG=$(git rev-list --max-parents=0 HEAD)
            echo "No stable tag found, using initial commit as baseline."
          else
            PREVIOUS_TAG=$LATEST_STABLE_TAG
            echo "Found latest stable tag: $PREVIOUS_TAG"
          fi

          CHANGELOG=$(git log --pretty=format:"* %s (%h)" --invert-grep --grep="^ci: Update resource_version" "$PREVIOUS_TAG..$CURRENT_TAG")
          if [ -z "$CHANGELOG" ]; then
            CHANGELOG="* 首次发布或无用户提交"
          fi
          {
            echo 'CHANGELOG<<EOF'
            echo "$CHANGELOG"
            echo 'EOF'
          } >> $GITHUB_OUTPUT

      # ================== FETCH AND PACKAGE ==================
      - name: Fetch latest MFWPH release (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          New-Item -Path "mfwph-download" -ItemType Directory -Force
          Write-Host "Fetching latest MFWPH release..."
          $headers = @{ "Authorization" = "Bearer ${{ secrets.GITHUB_TOKEN }}" }
          $release = Invoke-RestMethod -Uri "https://api.github.com/repos/TanyaShue/MFWPH/releases/latest" -Headers $headers
          $downloadUrl = ($release.assets | Where-Object { $_.name -eq "${{ matrix.mfwph_pattern }}" }).browser_download_url
          if (-not $downloadUrl) {
            Write-Host "::error::Could not find ${{ matrix.mfwph_pattern }} in the latest release"
            exit 1
          }
          Write-Host "Downloading MFWPH from: $downloadUrl"
          Invoke-WebRequest -Uri $downloadUrl -OutFile "mfwph-download/${{ matrix.mfwph_pattern }}"
          Expand-Archive -Path "mfwph-download/${{ matrix.mfwph_pattern }}" -DestinationPath "mfwph-extracted" -Force
          Write-Host "MFWPH package extracted successfully"

      - name: Fetch latest MFWPH release (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          mkdir -p mfwph-download
          echo "Fetching latest MFWPH release..."
          RELEASE_JSON=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/TanyaShue/MFWPH/releases/latest)
          DOWNLOAD_URL=$(echo "$RELEASE_JSON" | python3 -c "import sys, json; data = json.load(sys.stdin); pattern = '${{ matrix.mfwph_pattern }}'; [print(asset['browser_download_url']) for asset in data.get('assets', []) if asset['name'] == pattern]" | head -n1)
          curl -L -o "mfwph-download/${{ matrix.mfwph_pattern }}" "$DOWNLOAD_URL"
          mkdir -p mfwph-extracted
          tar -xzf "mfwph-download/${{ matrix.mfwph_pattern }}" -C mfwph-extracted
          echo "MFWPH package extracted successfully"

      # (中间资源复制和打包逻辑保持不变)
      # ... 省略部分重复无改动的代码 ...

  release:
    name: Create Release
    needs: [build, update-and-commit]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.update-and-commit.outputs.commit_sha }}
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      # ================== FIXED CHANGELOG LOGIC (RELEASE) ==================
      - name: Generate Changelog
        id: changelog
        run: |
          CURRENT_TAG="${{ github.ref_name }}"
          # Find the latest stable tag by filtering out pre-release tags and current tag itself
          LATEST_STABLE_TAG=$(git tag --sort=-v:refname | grep -v -- '-beta' | grep -v -- '-rc' | grep -v "^${CURRENT_TAG}$" | head -n 1)

          if [ -z "$LATEST_STABLE_TAG" ]; then
            PREVIOUS_TAG=$(git rev-list --max-parents=0 HEAD)
            echo "No stable tag found, using initial commit as baseline."
          else
            PREVIOUS_TAG=$LATEST_STABLE_TAG
            echo "Found latest stable tag: $PREVIOUS_TAG"
          fi
          
          echo "Generating changelog between $PREVIOUS_TAG and $CURRENT_TAG"
          
          CHANGELOG=$(git log --pretty=format:"* %s (%h)" --invert-grep --grep="^ci: Update resource_version" "$PREVIOUS_TAG..$CURRENT_TAG")
          
          if [ -z "$CHANGELOG" ]; then
            CHANGELOG="* 首次发布或本次发布无用户提交。"
          fi
          
          {
            echo 'CHANGELOG<<EOF'
            echo "$CHANGELOG"
            echo 'EOF'
          } >> $GITHUB_OUTPUT

      - name: Prepare release files
        run: |
          mkdir -p release_files
          find ./artifacts -type f \( -name "*.zip" -o -name "*.tar.gz" \) -exec mv {} ./release_files/ \;
          echo "Release files:"
          ls -la ./release_files/

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            ## 版本 ${{ github.ref_name }} 更新日志
            
            ${{ steps.changelog.outputs.CHANGELOG }}
            
            [已有 Mirror酱 CDK？点击前往高速下载](https://mirrorchyan.com/zh/projects?rid=MaaYYs)
          draft: false
          prerelease: false
          artifacts: ./release_files/*
          artifactContentType: application/octet-stream
          artifactErrorsFailBuild: true

      - name: Trigger MirrorChyanUploading
        shell: bash
        run: |
          gh workflow run --repo $GITHUB_REPOSITORY mirrorchyan
          gh workflow run --repo $GITHUB_REPOSITORY mirrorchyan_release_note
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}